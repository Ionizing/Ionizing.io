<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VASP on 伪化生搬砖工地</title>
    <link>https://ionizing.page/tags/VASP/</link>
    <description>Recent content in VASP on 伪化生搬砖工地</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 21 May 2019 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://ionizing.page/tags/VASP/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>在 macOS 上编译 VASP 5.4.4</title>
      <link>https://ionizing.page/post/compile-vasp-on-macos/</link>
      <pubDate>Tue, 21 May 2019 00:00:00 +0800</pubDate>
      
      <guid>https://ionizing.page/post/compile-vasp-on-macos/</guid>
      <description>因组里的服务器放假期间关闭，又适逢疫情导致假期延长好久不能使用 VASP ，故考虑在笔记本上编译一个 VASP ，跑一些小的体系试验用。 准备工作 本机环境 本辣鸡使用的机器拥有 16G RAM 和 4 核 CPU ，跑十几个原子的体系应该还是没问题的。系统是 macOS 10.15.1 ，机器上已经安装了 Homebrew 。 安装依赖库 GCC 全家桶 由于 macOS 默认使用 LLVM + Clang 编译器，</description>
    </item>
    
    <item>
      <title>如何求解 A * B = C 中的矩阵 B ？</title>
      <link>https://ionizing.page/post/how-to-solve-matrix-B-in-A-times-B-equals-C/</link>
      <pubDate>Fri, 25 Jan 2019 23:44:50 +0000</pubDate>
      
      <guid>https://ionizing.page/post/how-to-solve-matrix-B-in-A-times-B-equals-C/</guid>
      <description>问题 给定一个矩阵方程 $$ \mathbf{A} \times \mathbf{B} = \mathbf{C} $$ 其中 $\mathbf{B}$ 是方阵， $\mathbf{A}$ 和 $\mathbf{C}$ 的形状相同，问如何求解 $\mathbf{B}$ ? 解答 $\mathbf{A}$ 和 $\mathbf{C}$ 的形状相同，如果它们都是方阵，则 $$ \begin{align} \mathbf{A} \times \mathbf{B} ={}&amp;amp; \mathbf{C} \ \mathbf{A}^{-1} \times \mathbf{A} \times \mathbf{B} ={}&amp;amp; \mathbf{A}^{-1} \times \mathbf{C} \ \mathbf{B} ={}&amp;amp; \mathbf{A}^{-1} \times \mathbf{C} \label{eq:easy} \end{align} $$ 但 $\mathbf{A}$ 和 $\mathbf{C}$ 未必是方阵，所以不存在逆矩阵，也就无法通过等式左右同时左乘 $\mathbf{A}^{-1}$ 的方法直接求出 $\mathbf{B}$ 。那么此时如何求解 $\mathbf{B}$ 呢</description>
    </item>
    
    <item>
      <title>WAVECAR 数据结构的解析</title>
      <link>https://ionizing.page/post/2018-12-31_WAVECAR-parsing/</link>
      <pubDate>Mon, 31 Dec 2018 20:16:24 +0000</pubDate>
      
      <guid>https://ionizing.page/post/2018-12-31_WAVECAR-parsing/</guid>
      <description>我们知道，WAVECAR 是 VASP 计算完成后输出的一个二进制文件，它包含的信息用普通的文本编辑器不能直接查看。但有时一些拥有好奇心的人总想看看它里面到底储存了什么东东，于是闲得 X 疼的本人就本着生命不息、折腾不止的态度研究了一下 WAVECAR 的数据结构，终于写出了一个能解析 WAVECAR 的小程序，于是有了这篇博</description>
    </item>
    
    <item>
      <title>在 VASP(PBE) 计算中如何优雅地踩坑？</title>
      <link>https://ionizing.page/post/how-to-struggle-with-vasp/</link>
      <pubDate>Wed, 28 Mar 2018 17:28:20 +0000</pubDate>
      
      <guid>https://ionizing.page/post/how-to-struggle-with-vasp/</guid>
      <description>警告：本渣刚学 VASP 不久，对 VASP 的算法、参数不甚了解，如果有大触偶遇此文，并发现有错误，请在评论区指出或邮箱联系本渣。 前言 本文是本渣从 3 月初以来刚接触 VASP 所学技能与遇到坑的总结，以纪念我为文献中一副图而逝去的最近一星期。何为 VASP 以及 VASP 能做什么？本渣只是一个刚学的菜鸡，恕不能回答，请自行 Google 解</description>
    </item>
    
  </channel>
</rss>